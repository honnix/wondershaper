#!/bin/bash
# Script based on The Wonder Shaper http://lartc.org/wondershaper/
# Heavily modified by Juan Orti <j.orti.alcaine@gmail.com>
# Licensed under the GPL

# Copy the script to /etc/NetworkManager/dispatcher.d and make it executable
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped and
# your network IP range.
#
# This script is thought for hosts with a private IP inside a LAN,
# not for routers or hosts with public IP

# NetworkManager info
IF=$1
STATUS=$2
# Executables 
TC="/sbin/tc"
IPTABLES="/sbin/iptables"
# Internal LAN config
# 100 Mb/s Ethernet
DEV="p6p1"
LOCALNET="192.168.10.0/24"
ETH_DOWNLINK=100000
ETH_UPLINK=100000
# Internet bandwidth
DOWNLINK=11000
UPLINK=600
# high priority destination ports
HIPRIOPORTDST="53 123"
# low priority source ports
NOPRIOPORTSRC="4662 4672 4665 8333 51413"
# low priority destination ports
NOPRIOPORTDST="4662 4672 4665 8333 51413"

if [ "$1" = "status" ]; then
	echo "Qdiscs"
	echo "--------"
	$TC -s qdisc ls dev $DEV
	echo
	echo "Classes"
        echo "--------"
	$TC -s class ls dev $DEV
	echo
	echo "Filters"
        echo "--------"
	$TC filter show dev $DEV
	echo
	echo "Iptables mangle table"
	echo "--------"
	$IPTABLES -t mangle -L -v -n
	exit
fi


if [ "$IF" = "$DEV" ] && [ "$STATUS" = "up" ]; then

	########## uplink #############
	# install root HTB, point default traffic to 1:20
	$TC qdisc add dev $DEV root handle 1: htb default 20
	# Class 1:1 Localnet
	# Class 1:2 Internet
	# Class 1:10 Internet - high priority
	# Class 1:20 Internet - normal priority
	# Class 1:30 Internet - low priority
	$TC class add dev $DEV parent 1: classid 1:1 htb rate ${ETH_UPLINK}kbit ceil ${ETH_UPLINK}kbit burst 1024k prio 2
	$TC class add dev $DEV parent 1: classid 1:2 htb rate ${UPLINK}kbit ceil ${UPLINK}kbit burst 256k prio 2
	$TC class add dev $DEV parent 1:2 classid 1:10 htb rate $[8*$UPLINK/10]kbit ceil ${UPLINK}kbit burst 256k prio 1
	$TC class add dev $DEV parent 1:2 classid 1:20 htb rate $[2*$UPLINK/10]kbit ceil ${UPLINK}kbit burst 64k prio 2
	$TC class add dev $DEV parent 1:2 classid 1:30 htb rate 1kbit ceil ${UPLINK}kbit burst 6k prio 3
	# all get Stochastic Fairness:
	$TC qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
	$TC qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
	$TC qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10

	###### Iptables Filters
	$IPTABLES -t mangle -N OUTPUT_QOS
	$IPTABLES -t mangle -A POSTROUTING -o $DEV -j OUTPUT_QOS
	$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV -d $LOCALNET -j CLASSIFY --set-class 1:1
	$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -p tcp -m length --length :64 -j CLASSIFY --set-class 1:10
	#$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -m tcp -p tcp --tcp-flags ACK ACK -j CLASSIFY --set-class 1:10
	$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -m tos --tos Minimize-Delay -j CLASSIFY --set-class 1:10
	$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -m icmp -p icmp --icmp-type echo-reply -j CLASSIFY --set-class 1:10
	$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -m icmp -p icmp --icmp-type echo-request -j CLASSIFY --set-class 1:10
	for a in $HIPRIOPORTDST
	do
		$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -m tcp -p tcp --dport $a -j CLASSIFY --set-class 1:10
		$IPTABLES -t mangle -A OUTPUT_QOS -o $DEV ! -d $LOCALNET -m udp -p udp --dport $a -j CLASSIFY --set-class 1:10
	done
	for a in $NOPRIOPORTDST
        do
                $IPTABLES -t mangle -A OUTPUT_QOS ! -d $LOCALNET -o $DEV -m tcp -p tcp --dport $a -j CLASSIFY --set-class 1:30
		$IPTABLES -t mangle -A OUTPUT_QOS ! -d $LOCALNET -o $DEV -m udp -p udp --dport $a -j CLASSIFY --set-class 1:30
        done
	for a in $NOPRIOPORTSRC
        do
		$IPTABLES -t mangle -A OUTPUT_QOS ! -d $LOCALNET -o $DEV -m tcp -p tcp --sport $a -j CLASSIFY --set-class 1:30
		$IPTABLES -t mangle -A OUTPUT_QOS ! -d $LOCALNET -o $DEV -m udp -p udp --sport $a -j CLASSIFY --set-class 1:30
        done
	
	########## downlink #############
	# slow downloads down to somewhat less than the real speed  to prevent 
	# queuing at our ISP. Tune to see how high you can set it.
	# ISPs tend to have *huge* queues to make sure big downloads are fast
	#
	# attach ingress policer:
	$TC qdisc add dev $DEV handle ffff: ingress

	# Mark in iptables the packets coming from Internet
	# and drop if they are coming in too fast:
	###### Iptables Filters
	$IPTABLES -t mangle -N INPUT_QOS
	$IPTABLES -t mangle -A PREROUTING -i $DEV -j INPUT_QOS
	$IPTABLES -t mangle -A INPUT_QOS -i $DEV ! -s $LOCALNET -j MARK --set-mark 3
	$TC filter add dev $DEV parent ffff: protocol ip prio 50 handle 3 \
		fw police rate ${DOWNLINK}kbit burst 10k drop flowid :1


elif [ "$IF" = "$DEV" ] && [ "$STATUS" = "down" ]; then
	# clean existing down- and uplink qdiscs, hide errors
        $TC qdisc del dev $DEV root >/dev/null 2>&1
        $TC qdisc del dev $DEV ingress >/dev/null 2>&1

	# Clean iptables rules	
	$IPTABLES -t mangle -D POSTROUTING -o $DEV -j OUTPUT_QOS
	$IPTABLES -t mangle -F OUTPUT_QOS
	$IPTABLES -t mangle -X OUTPUT_QOS
	$IPTABLES -t mangle -D PREROUTING -i $DEV -j INPUT_QOS
	$IPTABLES -t mangle -F INPUT_QOS
	$IPTABLES -t mangle -X INPUT_QOS
fi
